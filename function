Q1.Write a program takes cmd line argument n inputs and print table of the
powers of 2 that are less than or equal to 2^n.

#!/bin/bash
power=1
read -p "enter num:" n
for ((i=1;i<=$n;i++))
do
power=$((power*2))
echo $power
done
Output:

enter num:4
2
4
8
16


Q2.Write a progam that takes a cmd line arguement n and prints the nth
harmonic number.

#!/bin/bash
sum=0
read -p "enter num:" n
for ((i=1;i<=n;i++))
do
sum=`echo "scale=4;$sum+1.0/$i" | bc
done
echo $sum
`
output:
enter num:4
2.0833


Q.3 Write a program that takes a input and determine if the num is prime.

#!/bin/bash
read -p "enter number:" n
for ((i=1;i<=n;i++))
do
if [ $((n%i)) -eq 0 ]
then
((count++))
fi
done
if [ $count -eq 2 ]
then
echo "$n is a prime num"
elseecho "$n not a prime num"
fi

Output:
enter num:7
7 is a prime num


Q.4 Extend the program that takes a range of number as input and outputs
the prime numbers in that range.

#!/bin/bash -x
read -p "enter min num:" min
read -p "enter max num:" max
for (( a=$min; a<=$max; a++ ))
do
count=0
for (( i=1 ; i<=$a ; i++ ))
do
if [ $(( $a%$i )) -eq 0 ]
then
((count++))
fi
done
done
if [ $count -eq 2 ]
then
echo $a"is prime num"
fi


Output:
enter min num:4
enter max num:7
5is prime num
7is prime num


Q5. Write a program that computes a factorial

read -p "enter num:" num
fact=1
for ((i=1 ; i<=num ; i++))
do
fact=$(( fact*i ))
done
echo $num"fact is"$fact


Q6.Write a program takes a input from cmd line and prints power of 2^n
until it reaches 256

#!/bin/bash
power=1
read -p "enter num:" nwhile [ $power -lt 256 ]
do
for ((i=1;i<=$n;i++))
do
power=$((power*2))
echo $power
if [ $power -eq 256 ]
then
break
fi
done
done

Q7.Find the magic number

#!/bin/bash -x
i=50
n=50
while [ 1 ]
do
read -p "num is greater than or less $(( n ))" j
if [[ "$j" == "l" ]]
then
i=$((i/2))
n=$((n-i))
if [ $i -lt 1 ]
then
n=$((n-1))
fi
elif [[ "$j" == "g" ]]
then
i=$((i/2))
n=$((n+i))
if [ $i -lt 1 ]
then
n=$((n+1))
fi
elif [[ "$j" == "y" ]]
then
echo "your number is $(( n ))"
fi
done

Q8.Extend flip coin problem till either head or tail wins 11 times

#!/bin/bash -x
tails=0
heads=0
while [ $heads -ne 11 ] || [ $tails -ne 11 ]
do
toss=$(( RANDOM%2 ))if [ $toss -eq 0 ]
then
((heads++))
if [ $heads -eq 11 ]
then
echo "head wins"
break
fi
else
((tails++))
if [ $tails -eq 11 ]
then
echo "tail wins"
break
fi
fi
done
echo "head="$heads"and tail="$tails


output:
head wins
head=11and tail=8


Q9. Write a program where gambler starts with 100 and places re 1 until
he/she goes broke or reach the goal 200

#!/bin/bash
bal=100
loss=0
wins=0
until [ $bal -eq 0 ] || [ $bal -eq 200 ]
do
bet=$(( RANDOM%2 ))
if [ $bet -eq 0 ]
then
((loss++))
((bal--))
else
((wins++))
((bal++))
fi
done
totalBets=$(( wins+loss ))
echo "bal is "$bal
echo "num of wins:"$wins" num of loss:"$loss
echo "number of bets made:"$totalBets


output:
bal is 200num of wins:10029 num of loss:9929
number of bets made:19958


Q10.Write a program to compute facors of a number N using prime
factorization method.

read -p "enter number:" n
for ((i=2;n>1;i++))
do
while [ $(( n%i )) -eq 0 ]
do
echo $i
n=$(( n/i ))
done
done
output:
enter number:36
2
2
3
3


Q11.Help user find degF or degC On their conversion selection.use case
statement.
a. degF=(degC*9/5)+32
b. degC=(degF-32)*5/9

#!/bin/bash
read -p "enter the operation num 1.degF 2.degC:" n
case $n in
"1")
read -p "enter num:" cel
far=`echo "($cel*9/5)+32" | bc`
echo $cel"cel="$far"far"
;;
"2")
read -p "enter num:" far
cel=`echo "($far-32)*5/9" | bc`
echo $far"far="$cel"cel"
;;
*)echo "enter valid num "
esac

Output:
enter the operation num 1.degF 2.degC:1
enter num:4
4cel=39farQ12.Write a function to check if two nums are palindromes


Q12.Write a function to check if two nums are palindromes

#!/bin/bash -x
read -p "enter num:" n
sum=0 temp=$n
palindrome () {
while [ $n -ne 0 ]
do
r=$(( n%10 ))
sum=$(( sum*10+r ))
n=$(( n/10 ))
done
if [ $temp -eq $sum ]
then
echo "num is palindrome"
else
echo "num is not palindrome"
fi
}
palindrome $n

output:
enter num:121
num is palindrome


Q13.Take a number from user and check if it is prime and palindrome
#!/bin/bash -x
palindrome () {
sum=0 temp=$n
while [ $n -ne 0 ]
do
r=$(( n%10 ))
sum=$(( sum*10+r ))
n=$(( n/10 ))
done
if [ $temp -eq $sum ]
then
echo $temp" is palindrome"
else
echo $temp" is not palindrome"
fi
}
read -p "enter number:" n
for ((i=1;i<=n;i++))
do
if [ $((n%i)) -eq 0 ]
then
((count++))
fidone
if [ $count -eq 2 ]
then
echo "$n is a prime num"
palindrome $n
else
echo "$n not a prime num"
fi

output:
enter number:11
11 is a prime num
11 is palindrome
